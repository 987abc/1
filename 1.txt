2) NAIVE BAYES ALGORITHM
> install.packages("e1071")
> library(e1071)
> pairs(iris[1:4], main="Iris Data (red=setosa, green=versicolor, blue=virginica)", pch=21, bg=c("red", "green", "blue")[unclass(iris$Species)])
> data(iris)
> summary(iris)
> classifier <- naiveBayes(iris[,1:4], iris[,5]) 
> table(predict(classifier, iris[,-5]), iris[,5])

3) DECISION TREE ALGORITHM
> install.packages("party")
> install.packages("partykit")
> library(party)
> library(partykit)
> str(iris)
> set.seed(1234)
> ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
> trainData <- iris[ind==1,]
> testData <- iris[ind==2,]
> myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
> iris_ctree <- c(myFormula, data=trainData)
> table(predict(iris_ctree), trainData$Species)
> plot(iris_ctree)
> plot(iris_ctree, type="simple")
> # predict on test data
> testPred 	<- predict(iris_ctree, newdata = testData)
> table(testPred, testData$Species)

4)	TIME SERIES ANALYSIS
> a <- ts(1:30, frequency=12, start=c(2011,3))
> print(a)
> str(a)
> attributes(a)
> plot(AirPassengers)
> apts <- ts(AirPassengers, frequency=12)
> f <- decompose(apts)
> #seasonal figures
> plot(AirPassengers)
> # Function decompose() is applied below to AirPassengers to break it into various components.
> f$figure
> plot(f$figure, type= "b", xaxt= "n ", xlab= " ")
> monthNames <- months(ISOdate(2011,1:12,1))
> axis(1, at=1:12, labels=monthNames, las=2)
> # Time Series Forecasting
> fit <- arima(AirPassengers, order=c(1,0,0), list(order=c(2,1,0), period=12))
> fore <- predict(fit, n.ahead=24)
> # error bounds at 95% confidence level
> U <- fore$pred + 2*fore$se
> L <- fore$pred - 2*fore$se
> ts.plot(AirPassengers, fore$pred, U, L, col=c(1,2,4,4), lty = c(1,1,2,2))
> legend("topleft", c("Actual", "Forecast", "Error Bounds (95% Confidence)"), col=c(1,2,4), lty=c(1,1,2))

5)	CLUSTERING ALGORITHM
> # k-means
> iris2 <- iris
> iris2$Species <- NULL
> (kmeans.result <- kmeans(iris2, 3))
> table(iris$Species, kmeans.result$cluster)
> plot(iris2[c("Sepal.Length", "Sepal.Width")], col = kmeans.result$cluster)
> points(kmeans.result$centers[,c("Sepal.Length", "Sepal.Width")], col = 1:3, pch = 8, cex=2)
> # K-medoids
> install.packages("fpc")
> library(fpc)
> pamk.result <- pamk(iris2)
> # number of clusters
> pamk.result$nc[1]
> # check clustering against actual species
> table(pamk.result$pamobject$clustering, iris$Species)
> layout(matrix(c(1,2),1,2)) # 2 graphs per page
> plot(pamk.result$pamobject)
> layout(matrix(1)) # change back to one graph per page
> pamk.result <- pamk(iris2, 3)
> table(pamk.result$pamobject$clustering,iris$Species)
> layout(matrix(c(1,2),1,2)) # 2 graphs per page
> plot(pamk.result$pamobject)
> layout(matrix(1)) # change back to one graph per page

6)	K-NEAREST NEIGHBOR
> install.packages("RWeka")
> library(RWeka)
> iris <- read.arff(system.file("arff", "iris.arff", package = "RWeka"))
> classifier <- IBk(class ~., data = iris)
> summary(classifier)
# Execution and Results
> classifier <- IBk(class ~ ., data = iris, control = Weka_control(K = 20, X = TRUE))
> evaluate_Weka_classifier(classifier, numFolds = 10)
> classifier

7)	ASSOCIATION ALGORITHM
> str(Titanic)
> df <- as.data.frame(Titanic) 
> head(df)
> titanic.raw <- NULL 
> for(i in 1:4) { titanic.raw <- cbind(titanic.raw, rep(as.character(df[,i]), df$Freq)) }
> titanic.raw <- as.data.frame(titanic.raw) 
> names(titanic.raw) <- names(df)[1:4]
> dim(titanic.raw)
> summary(titanic.raw)
> str(titanic.raw) 
> head(titanic.raw)
> summary(titanic.raw)